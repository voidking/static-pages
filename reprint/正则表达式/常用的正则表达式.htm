<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh">
	<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="zh-CN" />
    <title>正则表达式,常用的正则表达式,js正则表达式,正则表达式数字,正则表达式邮箱_脚本之家</title>
    <meta name="keywords" content="正则表达式, 常用, 邮件地址, 正则表达式大全" />
    <meta name="description" content="正则表达式（英文：Regular Expression）在计算机科学中，是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。正则表达式通常缩写成“regex”，单数有regexp、regex，复数有regexps、regexes、regexen" />
    <meta name="author" content="deerchao" />
	<link rel="SHORTCUT ICON" href="../../images/regex.ico"/>
    <style type="text/css">
    	    body {font-size:100%;}
            h1, #meta {text-align:center}
            .webStandards {text-align:right; font-size:80%; color: gray;}
            .webStandards a {text-align:right; font-size:small; color: gray;}
            p {text-indent:2em; line-height:140%; margin:20px}
            table { border-collapse:collapse; border:solid 1px gray; border-width: 1px 1px 0 0; width:85%; margin:20px 5%;}
            td, th {border:solid 1px gray; border-width:0 0 1px 1px;}
            .regex { font-family:"Courier New";}
            tbody tr:hover {background:#eee;}
            #top {background:#eee; line-height:200%;}
            #top a {text-decoration: none; vertical-align:middle; color:Black; display:block; display:inline-block; text-align: center; padding:3px 15px; }
            #top a:hover { background:#ccc;}
    </style>
  </head>
  <body>
    <div id="top">
        <a href="./正则表达式30分钟入门教程.htm" target="_blank">正则表达式30分钟入门教程</a> | <a href="./常用的正则表达式.htm" target="_blank">常用正则表达式</a>| <a href="./正则表达式速查表.htm" target="_blank">正则表达式速查表</a> | <a href="./正则表达式测试器.htm" target="_blank">正则表达式测试器</a> | <a href="../regexpal/" target="_blank">在线测试工具</a>  
    </div>
    <h1>常用正则表达式</h1>
    <p id="meta">版本：v0.03 (2013-5-13) 整理：deerchao</p>
    <p>说明：正则表达式通常用于两种任务：1.验证，2.搜索/替换。用于验证时，通常需要在前后分别加上^和$，以匹配整个待验证字符串；搜索/替换时是否加上此限定则根据搜索的要求而定，此外，也有可能要在前后加上\b而不是^和$。此表所列的常用正则表达式，除个别外均未在前后加上任何限定，请根据需要，自行处理。<br />
    </p>
    <div>
      <div>
        <p>正则表达式（英文：Regular   Expression）在计算机科学中，是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。</p>
      </div>
    </div>
<table>
        <thead>
            <tr>
                <th>说明</th>
                <th>正则表达式</th>
            </tr>
        </thead>
        <tr>
            <td>网址（URL）</td>
            <td><span class="regex">[a-zA-z]+://[^\s]*</span></td>
        </tr>
        <tr>
            <td>IP地址(IP Address)</td>
            <td><span class="regex">((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)</span></td>
        </tr>
        <tr>
            <td>电子邮件(Email)</td>
            <td><span class="regex">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</span></td>
        </tr>
        <tr>
            <td>QQ号码</td>
            <td><span class="regex">[1-9]\d{4,}</span></td>
        </tr>
        <tr>
            <td>HTML标记(包含内容或自闭合)</td>
            <td><span class="regex">&lt;(.*)(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;</span></td>
        </tr>
        <tr>
            <td>密码(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)</td>
            <td><span class="regex">(?=^.{8,}$)(?=.*\d)(?=.*\W+)(?=.*[A-Z])(?=.*[a-z])(?!.*\n).*$</span></td>
        </tr>

        <tr>
            <td>日期(年-月-日)</td>
            <td><span class="regex">(\d{4}|\d{2})-((1[0-2])|(0?[1-9]))-(([12][0-9])|(3[01])|(0?[1-9]))</span></td>
        </tr>
        <tr>
            <td>日期(月/日/年)</td>
            <td><span class="regex">((1[0-2])|(0?[1-9]))/(([12][0-9])|(3[01])|(0?[1-9]))/(\d{4}|\d{2})</span></td>
        </tr>
        <tr>
            <td>时间(小时:分钟, 24小时制)</td>
            <td><span class="regex">((1|0?)[0-9]|2[0-3]):([0-5][0-9])</span></td>
        </tr>

        <tr>
            <td>汉字(字符)</td>
            <td><span class="regex">[\u4e00-\u9fa5]</span></td>
        </tr>
        <tr>
            <td>中文及全角标点符号(字符)</td>
            <td><span class="regex">[\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]</span></td>
        </tr>
        <tr>
            <td>中国大陆固定电话号码</td>
            <td><span class="regex">(\d{4}-|\d{3}-)?(\d{8}|\d{7})</span></td>
        </tr>
        <tr>
            <td>中国大陆手机号码</td>
            <td><span class="regex">1\d{10}</span></td>
        </tr>
        <tr>
            <td>中国大陆邮政编码</td>
            <td><span class="regex">[1-9]\d{5}</span></td>
        </tr>
        <tr>
            <td>中国大陆身份证号(15位或18位)</td>
            <td><span class="regex">\d{15}(\d\d[0-9xX])?</span></td>
        </tr>

        <tr>
            <td>非负整数(正整数或零)</td>
            <td><span class="regex">\d+</span></td>
        </tr>
        <tr>
            <td>正整数</td>
            <td><span class="regex">[0-9]*[1-9][0-9]*</span></td>
        </tr>
        <tr>
            <td>负整数</td>
            <td><span class="regex">-[0-9]*[1-9][0-9]*</span></td>
        </tr>
        <tr>
            <td>整数</td>
            <td><span class="regex">-?\d+</span></td>
        </tr>
        <tr>
            <td>小数</td>
            <td><span class="regex">(-?\d+)(\.\d+)?</span></td>
        </tr>
        <tr>
            <td>不包含abc的单词</td>
            <td><span class="regex">\b((?!abc)\w)+\b</span></td>
        </tr>
    </table>
    <p>以上正则表达式均经过多次测试，并不断增加,因为不同程序或工具的正则表达式略有区别，大家可以根据需要进行简单修改<br />
      <br />
    <strong>常用正则表达式</strong></p>
    <p>正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。</p>
    <p>用户名：/^[a-z0-9_-]{3,16}$/</p>
    <p>密码：/^[a-z0-9_-]{6,18}$/</p>
    <p>十六进制值：/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</p>
    <p>电子邮箱：/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</p>
    <p>URL：/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</p>
    <p>IP   地址：/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</p>
    <p>HTML 标签：/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</p>
    <p>Unicode编码中的汉字范围：/^[u4e00-u9fa5],{0,}$/</p>
    <p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br />
      评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</p>
    <p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br />
      评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p>
    <p>匹配空白行的正则表达式：\n\s*\r<br />
      评注：可以用来删除空白行</p>
    <p>匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*?   /&gt;<br />
      评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p>
    <p>匹配首尾空白字符的正则表达式：^\s*|\s*$<br />
      评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p>
    <p>匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*<br />
      评注：表单验证时很实用</p>
    <p>匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*<br />
      评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p>
    <p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br />
      评注：表单验证时很实用</p>
    <p>匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}<br />
      评注：匹配形式如 0511-4405222 或 021-87888822</p>
    <p>匹配腾讯QQ号：[1-9][0-9]{4,}<br />
      评注：腾讯QQ号从10000开始</p>
    <p>匹配中国大陆邮政编码：[1-9]\d{5}(?!\d)<br />
      评注：中国大陆邮政编码为6位数字</p>
    <p>匹配身份证：\d{15}|\d{18}<br />
      评注：中国大陆的身份证为15位或18位</p>
    <p>匹配ip地址：\d+\.\d+\.\d+\.\d+<br />
      评注：提取ip地址时有用</p>
    <p>匹配特定数字：<br />
      ^[1-9]\d*$　 　 //匹配正整数<br />
      ^-[1-9]\d*$ 　 //匹配负整数<br />
      ^-?[1-9]\d*$　　   //匹配整数<br />
      ^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）<br />
      ^-[1-9]\d*|0$　　 //匹配非正整数（负整数 +   0）<br />
      ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　   //匹配正浮点数<br />
      ^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　   //匹配负浮点数<br />
      ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　   //匹配浮点数<br />
      ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 +   0）<br />
      ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 +   0）<br />
      评注：处理大量数据时有用，具体应用时注意修正</p>
    <p>匹配特定字符串：<br />
      ^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串<br />
      ^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串<br />
      ^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串<br />
      ^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串<br />
      ^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</p>
    <h2>表达式全集</h2>
    <p>正则表达式有多种不同的风格。下表是在PCRE中元字符及其在正则表达式上下文中的行为的一个完整列表：</p>
    <table border="1" cellspacing="1" bordercolor="#cccccc" cellpadding="2" width="778">
      <tbody>
        <tr>
          <th>字符</th>
          <th>描述</th>
        </tr>
        <tr>
          <th>\</th>
          <td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\\”匹配“\”而“\(”则匹配“(”。</td>
        </tr>
        <tr>
          <th>^</th>
          <td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。</td>
        </tr>
        <tr>
          <th>$</th>
          <td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。</td>
        </tr>
        <tr>
          <th>*</th>
          <td>匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}。</td>
        </tr>
        <tr>
          <th>+</th>
          <td>匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>
        </tr>
        <tr>
          <th>?</th>
          <td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td>
        </tr>
        <tr>
          <th>{n}</th>
          <td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td>
        </tr>
        <tr>
          <th>{n,}</th>
          <td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>
        </tr>
        <tr>
          <th>{n,m}</th>
          <td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>
        </tr>
        <tr>
          <th>?</th>
          <td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>
        </tr>
        <tr>
          <th>.</th>
          <td>匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“[.\n]”的模式。</td>
        </tr>
        <tr>
          <th>(pattern)</th>
          <td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。</td>
        </tr>
        <tr>
          <th>(?:pattern)</th>
          <td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。</td>
        </tr>
        <tr>
          <th>(?=pattern)</th>
          <td>正向预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
        </tr>
        <tr>
          <th>(?!pattern)</th>
          <td>负向预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>
        </tr>
        <tr>
          <th>x|y</th>
          <td>匹配x或y。例如，“z|food”能匹配“z”或“food”。“(z|f)ood”则匹配“zood”或“food”。</td>
        </tr>
        <tr>
          <th>[xyz]</th>
          <td>字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td>
        </tr>
        <tr>
          <th>[^xyz]</th>
          <td>负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“p”。</td>
        </tr>
        <tr>
          <th>[a-z]</th>
          <td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。</td>
        </tr>
        <tr>
          <th>[^a-z]</th>
          <td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>
        </tr>
        <tr>
          <th>\b</th>
          <td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</td>
        </tr>
        <tr>
          <th>\B</th>
          <td>匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td>
        </tr>
        <tr>
          <th>\cx</th>
          <td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</td>
        </tr>
        <tr>
          <th>\d</th>
          <td>匹配一个数字字符。等价于[0-9]。</td>
        </tr>
        <tr>
          <th>\D</th>
          <td>匹配一个非数字字符。等价于[^0-9]。</td>
        </tr>
        <tr>
          <th>\f</th>
          <td>匹配一个换页符。等价于\x0c和\cL。</td>
        </tr>
        <tr>
          <th>\n</th>
          <td>匹配一个换行符。等价于\x0a和\cJ。</td>
        </tr>
        <tr>
          <th>\r</th>
          <td>匹配一个回车符。等价于\x0d和\cM。</td>
        </tr>
        <tr>
          <th>\s</th>
          <td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]。</td>
        </tr>
        <tr>
          <th>\S</th>
          <td>匹配任何非空白字符。等价于[^\f\n\r\t\v]。</td>
        </tr>
        <tr>
          <th>\t</th>
          <td>匹配一个制表符。等价于\x09和\cI。</td>
        </tr>
        <tr>
          <th>\v</th>
          <td>匹配一个垂直制表符。等价于\x0b和\cK。</td>
        </tr>
        <tr>
          <th>\w</th>
          <td>匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”。</td>
        </tr>
        <tr>
          <th>\W</th>
          <td>匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td>
        </tr>
        <tr>
          <th>\xn</th>
          <td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。.</td>
        </tr>
        <tr>
          <th>\num</th>
          <td>匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。</td>
        </tr>
        <tr>
          <th>\n</th>
          <td>标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>
        </tr>
        <tr>
          <th>\nm</th>
          <td>标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</td>
        </tr>
        <tr>
          <th>\nml</th>
          <td>如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>
        </tr>
        <tr>
          <th>\un</th>
          <td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（?）。</td>
        </tr>
      </tbody>
    </table>
    <p>以下是以PHP的语法所写的示例 </p>
    <p>验证字符串是否只含数字与英文，字符串长度并在4~16个字符之间 <br />
      <br />
        &lt;?php<br />
        $str = 'a1234';<br />
        if (preg_match(&quot;^[a-zA-Z0-9]{4,16}$&quot;, $str)) {<br />
echo &quot;验证成功&quot;;<br />
} else {<br />
echo &quot;验证失敗&quot;;<br />
}<br />
?&gt;<br />
简易的台湾身份证字号验证 </p>
    <p>&lt;?php<br />
      $str = 'a1234';<br />
      if (preg_match(&quot;/^\w[12]\d{8}$/&quot;, $str)) {<br />
      echo &quot;验证成功&quot;;<br />
      } else {<br />
      echo &quot;验证失敗&quot;;<br />
      }<br />
      ?&gt;<br />
      以下示例是用 Perl 语言写的，与上面的示例功能相同 <br />
      print $str = &quot;a1234&quot; =~ m:^[a-zA-Z0-9]{4,16}$: ? &quot;COMFIRM&quot; : &quot;FAILED&quot;;<br />
      print $str = &quot;a1234&quot; =~ m&quot;^\w[12]\d{8}$&quot; ? &quot;COMFIRM&quot; : &quot;INVAILD&quot;;<br />
    </p>
    <h2>如何写出高效率的正则表达式</h2>
    <p>如果纯粹是为了挑战自己的正则水平，用来实现一些特效（例如使用正则表达式计算质数、解线性方程），效率不是问题；如果所写的正则表达式只是为了满足一两次、几十次的运行，优化与否区别也不太大。但是，如果所写的正则表达式会百万次、千万次地运行，效率就是很大的问题了。我这里总结了几条提升正则表达式运行效率的经验（工作中学到的，看书学来的，自己的体会），贴在这里。如果您有其它的经验而这里没有提及，欢迎赐教。</p>
    <p>为行文方便，先定义两个概念。</p>
    <p><strong>误匹配</strong>：指正则表达式所匹配的内容范围超出了所需要范围，有些文本明明不符合要求，但是被所写的正则式“击中了”。例如，如果使用\d{11}来匹配11位的手机号，\d{11}不单能匹配正确的手机号，它还会匹配98765432100这样的明显不是手机号的字符串。我们把这样的匹配称之为误匹配。 </p>
    <p><strong>漏匹配</strong>：指正则表达式所匹配的内容所规定的范围太狭窄，有些文本确实是所需要的，但是所写的正则没有将这种情况囊括在内。例如，使用\d{18}来匹配18位的身份证号码，就会漏掉结尾是字母X的情况。 </p>
    <ul>
    </ul>
    <p>写出一条正则表达式，既可能<strong>只出现</strong>误匹配（条件写得极宽松，其范围大于目标文本），也可能<strong>只出现</strong>漏匹配（只描述了目标文本中多种情况种的一种），还可能<strong>既有误匹配又有漏匹配</strong>。例如，使用\w+\.com来匹配.com结尾的域名，既会误匹配abc_.com这样的字串（合法的域名中不含下划线，\w包含了下划线这种情况），又会漏掉ab-c.com这样的域名（合法域名中可以含中划线，但是\w不匹配中划线）。</p>
    <p>精准的正则表达式意味着既无误匹配且无漏匹配。当然，现实中存在这样的情况：只能看到有限数量的文本，根据这些文本写规则，但是这些规则将会用到海量的文本中。这种情况下，尽可能地（如果不是完全地）消除误匹配以及漏匹配，并提升运行效率，就是我们的目标。本文所提出的经验，主要是针对这种情况。</p>
    <p><strong>掌握语法细节</strong>。正则表达式在各种语言中，其语法大致相同，细节各有千秋。明确所使用语言的正则的语法的细节，是写出正确、高效正则表达式的基础。例如，perl中与\w等效的匹配范围是[a-zA-Z0-9_]；perl正则式不支持肯定逆序环视中使用可变的重复（variable repetition   inside lookbehind，例如(?&lt;=.*)abc），但是.Net语法是支持这一特性的；又如，JavaScript连逆序环视（Lookbehind,如(?&lt;=ab)c）都不支持，而perl和python是支持的。《精通正则表达式》第3章《正则表达式的特性和流派概览》明确地列出了各大派系正则的异同，这篇文章也简要地列出了几种常用语言、工具中正则的比较。对于具体使用者而言，至少应该详细了解正在使用的那种工作语言里正则的语法细节。 </p>
    <p><strong>先粗后精，</strong><strong>先加后减</strong>。使用正则表达式语法对于目标文本进行描述和界定，可以像画素描一样，先大致勾勒出框架，再逐步在局步实现细节。仍举刚才的手机号的例子，先界定\d{11}，总不会错；再细化为1[358]\d{9}，就向前迈了一大步（至于第二位是不是3、5、8，这里无意深究，只举这样一个例子，说明逐步细化的过程）。这样做的目的是先消除漏匹配（刚开始先尽可能多地匹配，做加法），然后再一点一点地消除误匹配（做减法）。这样有先有后，在考虑时才不易出错，从而向“不误不漏”这个目标迈进。 </p>
    <p><strong>留有余地</strong>。所能看到的文本sample是有限的，而待匹配检验的文本是海量的，暂时不可见的。对于这样的情况，在写正则表达式时要跳出所能见到的文本的圈子，开拓思路，作出“战略性前瞻”。例如，经常收到这样的垃圾短信：“发*票”、“发#漂”。如果要写规则屏蔽这样烦人的垃圾短信，不但要能写出可以匹配当前文本的正则表达式   发[*#](?:票|漂)，还要能够想到 发.(?:票|漂|飘)之类可能出现的“变种”。这在具体的领域或许会有针对性的规则，不多言。这样做的目的是消除漏匹配，延长正则表达式的生命周期。 </p>
    <p><strong>明确</strong>。具体说来，就是<strong>谨慎</strong>用点号这样的元字符，<strong>尽可能</strong>不用星号和加号这样的任意量词。只要能确定范围的，例如\w，就不要用点号；只要能够预测重复次数的，就不要用任意量词。例如，写析取twitter消息的脚本，假设一条消息的xml正文部分结构是&lt;span   class=”msg”&gt;…&lt;/span&gt;且正文中无尖括号，那么&lt;span   class=”msg”&gt;[^&lt;]{1,480}&lt;/span&gt;这种写法<strong>的思路</strong>要好于&lt;span class=”msg”&gt;.*&lt;/span&gt;，原因有二：一是使用[^&lt;]，它保证了文本的范围不会超出下一个小于号所在的位置；二是明确长度范围，{1,480}，其依据是一条twitter消息大致能的字符长度范围。当然，480这个长度是否正确还可推敲，但是这种思路是值得借鉴的。说得狠一点，“滥用点号、星号和加号是不环保、不负责任的做法”。 </p>
    <p><strong>不要让稻草压死骆驼</strong>。每使用一个普通括号()而不是非捕获型括号(?:…)，就会保留一部分内存等着你再次访问。这样的正则表达式、无限次地运行次数，无异于一根根稻草的堆加，终于能将骆驼压死。养成合理使用(?:…)括号的习惯。 </p>
    <p><strong>宁简勿繁</strong>。将一条复杂的正则表达式拆分为两条或多条简单的正则表达式，编程难度会降低，运行效率会提升。例如用来消除行首和行尾空白字符的正则表达式s/^\s+|\s+$//g;，其运行效率理论上要低于s/^\s+//g;   s/\s+$//g;   。这个例子出自《精通正则表达式》第五章，书中对它的评论是“它几乎总是最快的，而且显然最容易理解”。既快又容易理解，何乐而不为？工作中我们还有其它的理由要将C==(A|B)这样的正则表达式拆为A和B两条表达式分别执行。例如，虽然A和B这两种情况只要有一种能够击中所需要的文本模式就会成功匹配，但是如果只要有一条子表达式（例如A）会产生误匹配，那么不论其它的子表达式（例如B）效率如何之高，范围如何精准，C的总体精准度也会因A而受到影响。 </p>
    <p><strong>巧妙定位</strong>。有时候，我们需要匹配的the，是作为单词的the（两边有空格），而不是作为单词一部分的t-h-e的有序排列（例如together中的the）。在适当的时候用上^，$，\b等等定位锚点，能有效提升找到成功匹配、淘汰不成功匹配的效率。 </p>

<p class="webStandards">
	    <a href="http://validator.w3.org/check?uri=referer">Validated XHTML 1.0 Strict</a>
	    <a href="http://jigsaw.w3.org/css-validator/check/referer">Validated CSS 2.1</a>
    </p>
 <p style="display:none">"><script type="text/javascript" src="http://img.jb51.net/inc/tongji.js"></script></p>
 <!-- Baidu Button BEGIN -->
<script type="text/javascript" id="bdshare_js" data="type=slide&img=2&uid=50347" ></script>
<script type="text/javascript" id="bdshell_js"></script>
<script type="text/javascript"> 
	document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + new Date().getHours();
</script>
<!-- Baidu Button END -->
</body>
</html>
